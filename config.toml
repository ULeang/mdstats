# 注意:此文件为toml文件,请使用utf8格式保存,建议使用文本编辑器进行修改,例如:notepad(记事本),vscode
# 不要使用word,wps等非专用于处理文本数据的编辑工具,否则极易产生编码错误
# 如果你不熟悉toml格式,请不要改变本文件内容顺序,仅修改内容即可
# 如果你不确定你的编辑是否正确,请在修改前保存备份

[custom_list]
# 设置卡组列的快捷选项
# 注意，由于存储使用的csv的限制，不能含有字符'|'、'"'等，否则会影响csv的数据
deck = ["自奏", "巳剑", "雷火", "码丽丝", "小黄毛"]

# 设置备注列的快捷选项
# 注意，由于存储使用的csv的限制，不能含有字符'|'、'"'等，否则会影响csv的数据
note = [
    "先攻全手坑",
    "后攻全通召",
    "对手小糖人",
    "对手纯也够",
    "信息差",
    "飞龙在天",
    "打完丢g",
    "绝不认输,oi!",
    "超时烙印",
    "无敌小黄毛打完丢g,怎么你不服气?",
]

[stats_tbl]
# 设置统计数据表格的单元格宽度(第1列,第2列,第3列),默认宽度50
column_width = [150, 50, 50]
# 设置统计数据表格的单元格高度(所有行)
rows_height = 30
# 设置是否使用自定义统计数据表格(详见stats_tbl.custom_rows)
use_custom_rows = true

[stats_tbl.color]
# 设置统计数据表格的背景色和前景色，rgb格式
background = "#00ff00"
foreground = "#ffffff"

[record_tbl]
# 设置对战记录表格的初始单元格宽度(第1列,第2列,第3列,第4列,第5列,第6列)
# 如果不为0，可以通过拖动表头来动态调整宽度
# 如果为0，则宽度跟随内容调整，不可手动调整
column_width = [0, 0, 0, 0, 150, 0]

[record_tbl.color.coin]
# 设置对战记录表格硬币列的背景色和前景色，分别对应赢币和输币
win = { background = "#98fb98", foreground = "#000000" }
lose = { background = "#f08080", foreground = "#000000" }

[record_tbl.color.st_nd]
# 设置对战记录表格先后列的背景色和前景色，分别对应先攻和后攻
first = { background = "#98fb98", foreground = "#000000" }
second = { background = "#f08080", foreground = "#000000" }

[record_tbl.color.result]
# 设置对战记录表格胜负列的背景色和前景色，分别对应胜利、失败和其他(如平局)
victory = { background = "#98fb98", foreground = "#000000" }
defeat = { background = "#f08080", foreground = "#000000" }
other = { background = "#afeeee", foreground = "#000000" }

[button.color.start]
# 设置启动按钮的背景色和前景色，分别对应启用(可以点)时和禁用(不可以点)时
enabled = { background = "#98fb98", foreground = "#000000" }
disabled = { background = "#a0a0a0", foreground = "#505050" }

[button.color.stop]
# 设置停止按钮的背景色和前景色，分别对应启用(可以点)时和禁用(不可以点)时
enabled = { background = "#f08080", foreground = "#000000" }
disabled = { background = "#a0a0a0", foreground = "#505050" }

[button.color.manual0]
# 设置手动输入按钮0号(赢币/先攻/胜利)的背景色和前景色，分别对应启用(可以点)时和禁用(不可以点)时
enabled = { background = "#afeeee", foreground = "#000000" }
disabled = { background = "#a0a0a0", foreground = "#505050" }

[button.color.manual1]
# 设置手动输入按钮1号(输币/后攻/失败)的背景色和前景色，分别对应启用(可以点)时和禁用(不可以点)时
enabled = { background = "#afeeee", foreground = "#000000" }
disabled = { background = "#a0a0a0", foreground = "#505050" }

[misc]
# 设置程序窗口打开时出现的位置以及大小(x轴，y轴，宽度，高度)
prog_window_init_geometry = { x = 800, y = 400, width = 900, height = 400 }

# 设置是否按日期保存记录数据，false为否，true为是
use_daily_record_csv = false

# 设置匹配的间隔时间，即每多少秒进行一次截图匹配，单位毫秒，注意，调低这个值会增加cpu占用进而导致系统变卡
matcher_sleep_ms = 500

# 设置启动时是否隐藏控制台窗口
hide_console = true

# 设置点击复制到剪贴板时是否弹出精彩操作
show_clip_success = true

# [debug]
# test_capture = true

# 在toml中,[a]表明a是一个表,即键值对表,或者字典,
# [[a]]表明a是一个表数组,即a是一个数组,其中每一个元素都是一个表
# 连续出现的[[a]]分别描述了a这个数组中的每一个元素
# 对表数组的引用将指向该表数组中上一个被定义的元素

# custom_rows是一个表数组,这是该数组中的第一个元素,即custom_rows[0]
[[stats_tbl.custom_rows]]
# cells是custom_rows数组第一个元素中的一个成员,其也是一个表数组,这是该数组中的第一个元素,即custom_rows[0].cells[0]
[[stats_tbl.custom_rows.cells]]
type = "Text" # 必填,Text/Expr/Preset
text = "总场次"  # 当type为Text时必填,该单元格固定显示的文本
span = 1      # 选填,该单元格横向跨越的物理单元格数量,默认为1,即不跨越
# 这是cells数组中的第二个元素,即custom_rows[0].cells[1]
[[stats_tbl.custom_rows.cells]]
type = "Expr"
# 当type为Expr时必填,该单元格将计算该表达式然后显示其结果
expr = "%i TOTAL"
# 当type为Expr时必填,该单元格将以何格式显示其表达式计算的结果,
# 请参见cpp format:https://en.cppreference.com/w/cpp/utility/format/spec.html
format = "{}"
span = 2

# custom_rows[1]
[[stats_tbl.custom_rows]]
# 这是表数组的另一种表示方式,custom_rows[1].cells
cells = [
    { type = "Text", text = "硬币(赢/输)" },
    { type = "Expr", expr = "%i COINWIN", format = "{}" },
    { type = "Expr", expr = "%i COINLOSE", format = "{}" },
]

[[stats_tbl.custom_rows]]
[[stats_tbl.custom_rows.cells]]
type = "Text"
text = "胜负(胜/负)"
[[stats_tbl.custom_rows.cells]]
type = "Preset"
preset = "WIN"  # 当type为Preset时必填,该单元格将使用预设的显示方案
[[stats_tbl.custom_rows.cells]]
type = "Preset"
preset = "LOSE"

[[stats_tbl.custom_rows]]
[[stats_tbl.custom_rows.cells]]
type = "Text"
text = "赢币胜率"
[[stats_tbl.custom_rows.cells]]
type = "Expr"
expr = """
%f
*   (/  (+  WFW
            WSW)
        COINWIN)
    100"""
format = "{:.2f}%"
# 当type为Expr时选填,若有值,该单元格将计算该表达式,若结果为真,改为使用expr_opt与format_opt
opt = "%i == COINWIN 0"
expr_opt = "%i 0"       # 当type为Expr且opt有值时必填
format_opt = "{}"       # 当type为Expr且opt有值时必填
span = 2

[[stats_tbl.custom_rows]]
[[stats_tbl.custom_rows.cells]]
type = "Text"
text = "输币胜率"
[[stats_tbl.custom_rows.cells]]
type = "Preset"
preset = "COINLOSEWINRATE"
span = 2

[[stats_tbl.custom_rows]]
[[stats_tbl.custom_rows.cells]]
type = "Text"
text = "综合胜率"
[[stats_tbl.custom_rows.cells]]
type = "Preset"
preset = "TOTALWINRATE"
span = 2

# 本程序的表达式
# 使用前缀表达式
# 支持+ - * /, > < >= <= == !=,
# 支持负数,使用圆括号括起来,如'(-114514)'
# 对于复杂的表达式,请多加圆括号
# 支持分支表达式if a then b else c,若a的值为真,该表达式的值为b,否则为c,0值被视为假,非0值被视为真,比较运算符的结果为0(假)或1(真)
# 支持自定义常量let a = b in c,该表达式的结果为c,在表达式c中可以使用常量a,如'let hello = + 114 514 in * hello 2'的结果为1256
# 不允许重复定义常量
# 在表达式前需要指定该表达式使用的数据类型,支持%i(整型，内部使用64位有符号整数int64_t),%f(浮点数,内部使用双精度浮点数double)
# 不支持浮点数字面量,如果有需要,请使用分数,如'%f / 1 3'即1/3
# 完整的表达式例如'%i let hello = 114 in let world = 514 in if > hello world then 1919 else 810'
# 请适当使用换行缩进圆括号等提升可读性,如
# '''
# %i
# let hello = 114 in
# let world = 514 in
# if > hello world
# then 1919
# else 810'''

# 本程序表达式内置的常量
# TOTAL    -> 总场次
# WIN      -> 胜利数
# LOSE     -> 失败数
# OTHER    -> 其他数(如平局等均被归类为其他)
# COINWIN  -> 硬币正面数
# COINLOSE -> 硬币反面数
# FIRST    -> 先攻数
# SECOND   -> 后攻数
# WFW      -> 硬币正面-先攻-胜利数,其中第一个字符代表硬币(W正面L反面),第二个字符代表先后攻(F先攻S后攻),第三个字符代表胜负(W胜利L失败O其他)
# WSL      -> 硬币正面-后攻-失败数,以此类推,其他不再列举

# 本程序的Preset
# TOTAL            -> 总场次
# WIN              -> 胜利数
# LOSE             -> 失败数
# COINWIN          -> 硬币正面数
# COINLOSE         -> 硬币反面数
# COINWINWINRATE   -> 赢币胜率
# COINLOSEWINRATE  -> 输币胜率
# TOTALWINRATE     -> 综合胜率

# 更强的自定义
# 如果你觉得统计数据表格的自定义功能仍然不够强,可以前往本项目的仓库地址:https://github.com/ULeang/mdstats,
# 在module/statstable目录下有一个statstable.hpp文件,将其中的接口全部实现,
# 然后使用x86_64-win32-seh-rev0的mingw gcc编译器将其编译成dll文件,命名`libmodstatstable.dll`
# 并替换程序根目录中的同名文件即可
# 作为参考,本项目的模块代码实现位于module/statstable/v2,或者另一个不包含自定义功能的简单模块module/statstable/v1
# 该接口仅包含标准cpp,你不需要任何其他的qt框架opencv框架等也能进行编译